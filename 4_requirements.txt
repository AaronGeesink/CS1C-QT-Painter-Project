*** General Requirements ***
	-Inheritance: See shapes.h (each shape class derives from the Shape base class)
	-Composition: The canvas class is composed of a vector of shape pointers (canvas.h, shapeData member, line 33)
	-Exception handlers: The insert() function in vector.h has a try-throw-catch exception handler (vector.h, starting at line 385)
			      There are also error messages for inputting negative coordinate or invalid IDs for the move form in the program.
	-Virtual function: The draw() function in the shapes class is a pure virtual function (See shapes.h draw function, line 171)
	-Two overload operators: Shape class overloads the equality and less than operators (shapes.h, lines 178 and 185; end of shapes.cpp, lines 380-end)
	-Templates: The entire vector class is templated (See vector.h)
	-Pointer: the vector class contains a pointer which points to an array of T elements (see vector.h, line 188, T * elem)
	-Copy constructor: the vector class contains a copy constructor (vector.h, line 49)
	-Disabled copy operators: shapes.h, line 149

	-Extra credit: started but not finished (vector.h line 167 has a selection bubble-sort, shapes.h line 189-202 have comparsion functions)

*** Project Requirements ***
	The program can be found in CS1C-QT-Project.zip (open CS1C-Qt-Project.pro)

	*** username: admin ***
	*** password: password ***
	*** NOTE: the file paths for loading shapes.txt MUST be set manually (located at shapesparser.cpp, lines 13 and 176) ***

	#2: Click the "Contact Us" button in the program to view team name and logo.

	#3: Click "Load File" in the program to begin rendering graphics objects.
	*** NOTE: the file paths for loading shapes.txt MUST be set manually (located at shapesparser.cpp, lines 13 and 176) ***
	    The rendering area can be resized by resizing the program window.

	#4 The canvas class contains shape data for all shapes being rendered from a shape file.
	Click "Load File" to load the shapes.txt file
	   (see shapesparser.h, line 17; shapesparser.cpp, line 10 is readShapesFile function,)

	#5 Shapes being rendered can be moved in the program by inputing the x and y coordinates,
	   and the id of the shape being moved, and then clicking "Move".
	   The mainwindow class reads in the coordinates from the user, and gives that data to the canvas
	   class in order to obtain the rendered shape data, and the canvas class assigns the data w/ the new
	   coordinates to each shape using the setX and setY functions. (see canvas.h, setPositionCoords function, line 18; canvas.cpp, line 21).

	#10 The Shapes parser class allows for saving and loading to a file through the readShapesFile and writeShapesFile
		functions. Click "Save File" to save to the shapes.txt file
		A vector of shapes pointers is passed as an argument and assigned to the data of the file by reading the
		file line by line and parsing each line for data. The files are then rendered to the screen on the next update.
		(see shapesparser.h, line 18; shapesparser.cpp, line 173 writeShapesFile)
